/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.app1.api;

import com.app1.model.Acquisto;
import com.app1.model.ApiAcquistiIdGet200Response;
import com.app1.model.Calzatura;
import com.app1.model.Cliente;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-01T17:11:19.027143200+02:00[Europe/Rome]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/acquisti : Ottieni una lista di acquisti
     *
     * @return Lista di acquisti disponibile con successo (status code 200)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiAcquistiGet",
        summary = "Ottieni una lista di acquisti",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista di acquisti disponibile con successo", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Acquisto.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/acquisti",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Acquisto>> apiAcquistiGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id_cliente\" : 6, \"id\" : 0, \"id_calzatura\" : 1 }, { \"id_cliente\" : 6, \"id\" : 0, \"id_calzatura\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/acquisti/{id} : Cancella un acquisto tramite ID
     *
     * @param id ID dell&#39;acquisto da cancellare (required)
     * @return Acquisto cancellato con successo (status code 204)
     *         or Acquisto non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiAcquistiIdDelete",
        summary = "Cancella un acquisto tramite ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Acquisto cancellato con successo"),
            @ApiResponse(responseCode = "404", description = "Acquisto non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/acquisti/{id}"
    )
    
    default ResponseEntity<Void> apiAcquistiIdDelete(
        @Parameter(name = "id", description = "ID dell'acquisto da cancellare", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/acquisti/{id} : Ottieni un acquisto tramite ID
     *
     * @param id ID dell&#39;acquisto (required)
     * @return Dettagli dell&#39;acquisto recuperati con successo (status code 200)
     *         or Acquisto non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiAcquistiIdGet",
        summary = "Ottieni un acquisto tramite ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dettagli dell'acquisto recuperati con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiAcquistiIdGet200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Acquisto non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/acquisti/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ApiAcquistiIdGet200Response> apiAcquistiIdGet(
        @Parameter(name = "id", description = "ID dell'acquisto", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_cliente\" : 6, \"id\" : 0, \"id_calzatura\" : 1, \"nome_calzatura\" : \"Sneaker comode per l'uso quotidiano.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/acquisti : Aggiungi un nuovo acquisto
     *
     * @param acquisto  (required)
     * @return Acquisto creato con successo (status code 201)
     *         or Richiesta non valida (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiAcquistiPost",
        summary = "Aggiungi un nuovo acquisto",
        responses = {
            @ApiResponse(responseCode = "201", description = "Acquisto creato con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/acquisti",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiAcquistiPost(
        @Parameter(name = "Acquisto", description = "", required = true) @Valid @RequestBody Acquisto acquisto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/calzature : Ottieni una lista di calzature
     *
     * @return Lista di calzature disponibile con successo (status code 200)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiCalzatureGet",
        summary = "Ottieni una lista di calzature",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista di calzature disponibile con successo", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Calzatura.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/calzature",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Calzatura>> apiCalzatureGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"descrizione\" : \"Sneaker comode per l'uso quotidiano.\", \"taglia\" : \"42\", \"nome\" : \"nome\", \"id\" : 0 }, { \"descrizione\" : \"Sneaker comode per l'uso quotidiano.\", \"taglia\" : \"42\", \"nome\" : \"nome\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/calzature/{id} : Cancella una calzatura tramite ID
     *
     * @param id ID della calzatura da cancellare (required)
     * @return Calzatura cancellata con successo (status code 204)
     *         or Calzatura non trovata (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiCalzatureIdDelete",
        summary = "Cancella una calzatura tramite ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Calzatura cancellata con successo"),
            @ApiResponse(responseCode = "404", description = "Calzatura non trovata"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/calzature/{id}"
    )
    
    default ResponseEntity<Void> apiCalzatureIdDelete(
        @Parameter(name = "id", description = "ID della calzatura da cancellare", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/calzature/{id} : Ottieni una singola calzatura tramite ID
     *
     * @param id ID della calzatura (required)
     * @return Dettagli della calzatura recuperati con successo (status code 200)
     *         or Calzatura non trovata (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiCalzatureIdGet",
        summary = "Ottieni una singola calzatura tramite ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dettagli della calzatura recuperati con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Calzatura.class))
            }),
            @ApiResponse(responseCode = "404", description = "Calzatura non trovata"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/calzature/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Calzatura> apiCalzatureIdGet(
        @Parameter(name = "id", description = "ID della calzatura", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descrizione\" : \"Sneaker comode per l'uso quotidiano.\", \"taglia\" : \"42\", \"nome\" : \"nome\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/calzature/{id} : Aggiorna una calzatura esistente
     *
     * @param id ID della calzatura da aggiornare (required)
     * @param calzatura  (required)
     * @return Calzatura aggiornata con successo (status code 200)
     *         or Calzatura non trovata (status code 404)
     *         or Dati non validi (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiCalzatureIdPut",
        summary = "Aggiorna una calzatura esistente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Calzatura aggiornata con successo"),
            @ApiResponse(responseCode = "404", description = "Calzatura non trovata"),
            @ApiResponse(responseCode = "400", description = "Dati non validi"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/calzature/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiCalzatureIdPut(
        @Parameter(name = "id", description = "ID della calzatura da aggiornare", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Calzatura", description = "", required = true) @Valid @RequestBody Calzatura calzatura
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/calzature : Aggiungi una nuova calzatura
     *
     * @param calzatura  (required)
     * @return Calzatura creata con successo (status code 201)
     *         or Richiesta non valida (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiCalzaturePost",
        summary = "Aggiungi una nuova calzatura",
        responses = {
            @ApiResponse(responseCode = "201", description = "Calzatura creata con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/calzature",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiCalzaturePost(
        @Parameter(name = "Calzatura", description = "", required = true) @Valid @RequestBody Calzatura calzatura
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/clienti : Lista dei clienti
     *
     * @return Lista dei clienti ottenuta con successo (status code 200)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiClientiGet",
        summary = "Lista dei clienti",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista dei clienti ottenuta con successo", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cliente.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/clienti",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Cliente>> apiClientiGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id_cliente\" : 0, \"nome\" : \"nome\" }, { \"id_cliente\" : 0, \"nome\" : \"nome\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/clienti/{id_cliente} : Cancella un cliente tramite ID
     *
     * @param idCliente ID del cliente da cancellare (required)
     * @return Cliente cancellato con successo (status code 204)
     *         or Cliente non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiClientiIdClienteDelete",
        summary = "Cancella un cliente tramite ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Cliente cancellato con successo"),
            @ApiResponse(responseCode = "404", description = "Cliente non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/clienti/{id_cliente}"
    )
    
    default ResponseEntity<Void> apiClientiIdClienteDelete(
        @Parameter(name = "id_cliente", description = "ID del cliente da cancellare", required = true, in = ParameterIn.PATH) @PathVariable("id_cliente") Integer idCliente
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/clienti/{id_cliente} : Cerca cliente per ID
     *
     * @param idCliente ID del cliente (required)
     * @return Dettagli del cliente recuperati con successo (status code 200)
     *         or Cliente non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiClientiIdClienteGet",
        summary = "Cerca cliente per ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dettagli del cliente recuperati con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Cliente.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cliente non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/clienti/{id_cliente}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Cliente> apiClientiIdClienteGet(
        @Parameter(name = "id_cliente", description = "ID del cliente", required = true, in = ParameterIn.PATH) @PathVariable("id_cliente") Integer idCliente
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_cliente\" : 0, \"nome\" : \"nome\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/clienti/{id_cliente} : Aggiorna un cliente esistente
     *
     * @param idCliente ID del cliente da aggiornare (required)
     * @param cliente  (required)
     * @return Cliente aggiornato con successo (status code 200)
     *         or Cliente non trovato (status code 404)
     *         or Dati non validi (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiClientiIdClientePut",
        summary = "Aggiorna un cliente esistente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Cliente aggiornato con successo"),
            @ApiResponse(responseCode = "404", description = "Cliente non trovato"),
            @ApiResponse(responseCode = "400", description = "Dati non validi"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/clienti/{id_cliente}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiClientiIdClientePut(
        @Parameter(name = "id_cliente", description = "ID del cliente da aggiornare", required = true, in = ParameterIn.PATH) @PathVariable("id_cliente") Integer idCliente,
        @Parameter(name = "Cliente", description = "", required = true) @Valid @RequestBody Cliente cliente
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/clienti : Aggiungi un nuovo cliente
     *
     * @param cliente  (required)
     * @return Cliente creato con successo (status code 201)
     *         or Richiesta non valida (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "apiClientiPost",
        summary = "Aggiungi un nuovo cliente",
        responses = {
            @ApiResponse(responseCode = "201", description = "Cliente creato con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/clienti",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiClientiPost(
        @Parameter(name = "Cliente", description = "", required = true) @Valid @RequestBody Cliente cliente
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
